<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Yassine Belmamoun - Personal Website</title><link href="https://www.yassinebelmamoun.com/" rel="alternate"></link><link href="https://www.yassinebelmamoun.com/feeds/all.atom.xml" rel="self"></link><id>https://www.yassinebelmamoun.com/</id><updated>2024-05-18T00:00:00+07:00</updated><subtitle>CTO @ Manatal.com &lt;br/&gt;Tech Entrepreneur &amp; Software Engineer</subtitle><entry><title>From PaaS to K8s: Lessons Learned on Our Startup's Infrastructure Journey</title><link href="https://www.yassinebelmamoun.com/migration-from-paas-to-kubernetes.html" rel="alternate"></link><published>2024-05-18T00:00:00+07:00</published><updated>2024-05-18T00:00:00+07:00</updated><author><name>Yassine Belmamoun</name></author><id>tag:www.yassinebelmamoun.com,2024-05-18:/migration-from-paas-to-kubernetes.html</id><summary type="html">&lt;p&gt;You've probably heard the advice a million times: when you're starting a new software project or company, just focus on building your product and creating value for customers. Don't get bogged down in infrastructure and DevOps. Use a Platform-as-a-Service (PaaS) like Heroku and iterate quickly.&lt;/p&gt;
&lt;p&gt;This is 100% the right …&lt;/p&gt;</summary><content type="html">&lt;p&gt;You've probably heard the advice a million times: when you're starting a new software project or company, just focus on building your product and creating value for customers. Don't get bogged down in infrastructure and DevOps. Use a Platform-as-a-Service (PaaS) like Heroku and iterate quickly.&lt;/p&gt;
&lt;p&gt;This is 100% the right call in the beginning. When we founded Manatal, we hosted everything on Heroku initially. It allowed us to rapidly develop our software without worrying about servers, deployments, scaling, etc. We could push new code and features fast.&lt;/p&gt;
&lt;p&gt;But there comes a point, as your startup grows, where you start pushing the limits of a PaaS. You need more granular control, better visibility into your systems, and the ability to optimize performance. About 2 years ago, we reached that inflection point at Manatal. So we decided to take the plunge and migrate our entire infrastructure from Heroku to Kubernetes on AWS.&lt;/p&gt;
&lt;p&gt;Was it challenging? Absolutely. Running your own Kubernetes clusters is no joke, especially compared to the simplicity of a PaaS. Suddenly you're on the hook for cluster management, the full CI/CD pipeline, monitoring, security, and a whole lot more. A lot more power but a lot more responsibility too.&lt;/p&gt;
&lt;p&gt;We had to level up our skills across the board - from containerizing microservices to deploying infrastructure-as-code. We evaluated different approaches and made opinionated choices. Kustomize instead of Helm. ArgoCD for continuous deployment. Datadog for observability. GitHub Actions for CI. KEDA and cluster-autoscaler for intelligent scaling. The list goes on.&lt;/p&gt;
&lt;p&gt;But now, I can confidently say it was worth it. We have so much more control and visibility now. When issues emerge, we can dive deep. We can tweak and optimize every layer.&lt;/p&gt;
&lt;p&gt;We also realized huge performance gains and cost savings compared to Heroku's more constrained (and expensive) resources. With the ability to use custom machine types and dynamic scaling based on load, our utilization is way up and our hosting bill is way down. But those savings don't just pad our bottom line. They go directly into making our product better, faster, and more feature-rich for our customers. Every dollar saved is a dollar invested in delivering more value to them.&lt;/p&gt;
&lt;p&gt;Migration to Kubernetes also forced us to modernize our architecture and development processes in a good way. Decomposing monoliths into microservices. Defining resources declaratively. Automating everything. Committing to gitops and immutable deployments. It can be a painful upgrade but you come out the other side as a more mature engineering organization.&lt;/p&gt;
&lt;p&gt;Now, I won't sugarcoat it. Kubernetes is complex and it's not the right choice for every company. You need to assess your team's capabilities and your scale needs realistically. Start with a PaaS. Squeeze everything you can out of that model. But when you're ready to unlock the next level of performance and control, Kubernetes will be waiting for you. The lessons you learn along the way will make you a better technologist.&lt;/p&gt;
&lt;p&gt;If you're considering making the jump from Heroku to Kubernetes on AWS like we did, here's a detailed rundown of what you'll need to learn and the tools we recommend:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Containerization:&lt;/strong&gt; Get comfortable with Docker and learn how to package your application into containers. This involves writing Dockerfiles, optimizing image sizes, and pushing images to a container registry. We use Amazon Elastic Container Registry (ECR) for storing and managing our Docker images securely.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes Concepts:&lt;/strong&gt; Master the fundamentals of Kubernetes architecture, including Pods, Services, Deployments, StatefulSets, and more. Learn how to define and manage application configurations using Kubernetes manifests. We use Kustomize for templating and managing Kubernetes manifests in a more modular and maintainable way.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EKS Cluster Management:&lt;/strong&gt; Learn how to create, configure, and operate Kubernetes clusters on AWS using EKS. This involves defining worker node groups, configuring the Kubernetes API server, setting up IAM roles, and integrating with other AWS services. We use eksctl, a powerful CLI tool, to simplify EKS cluster creation and management.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Observability Stack:&lt;/strong&gt; Build a robust monitoring and logging solution for your Kubernetes clusters and applications. We use Datadog for log management and application performance monitoring (APM). It provides deep visibility into cluster health, resource utilization, and application metrics.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gitops Workflow:&lt;/strong&gt; Embrace gitops principles and define all your infrastructure and application configurations as code in Git repositories. We use ArgoCD for continuous deployment and synchronization of our Kubernetes manifests. It ensures that our deployed applications always match our desired state defined in Git.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AWS Ecosystem Integration:&lt;/strong&gt; Familiarize yourself with the broader AWS ecosystem and learn how to integrate Kubernetes with other AWS services. For example, we use AWS Secrets Manager for securely storing and managing secrets, and Kubernetes external-secrets to sync those secrets into our clusters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scaling and Optimization:&lt;/strong&gt; Learn how to scale your Kubernetes applications efficiently. We use Kubernetes Horizontal Pod Autoscaler (HPA) and Cluster Autoscaler to automatically adjust the number of pods and nodes based on resource utilization. For more advanced scaling scenarios, we leverage Kubernetes Event-Driven Autoscaling (KEDA).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Development Workflow:&lt;/strong&gt; Adopt a smooth development workflow for building, testing, and deploying your applications. We use GitHub Actions for continuous integration (CI) pipelines to build and test our code changes automatically. For local Kubernetes development and troubleshooting, we rely on tools like kubectl and K9s, a terminal-based UI for interacting with Kubernetes clusters.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Remember, the journey to Kubernetes proficiency is gradual. Start with the basics, experiment with different tools, and learn from the vibrant Kubernetes community. As you gain experience, you'll be able to optimize your infrastructure further and tackle more advanced scenarios.
Embracing Kubernetes on AWS has been a game-changer for our startup, enabling us to scale seamlessly, improve efficiency, and unlock new possibilities. If you're ready to embark on this transformative journey, dive in with curiosity and determination. The effort you put in will pay off greatly in the long run.&lt;/p&gt;</content><category term="Software Engineering"></category></entry><entry><title>Pelican Tutorial</title><link href="https://www.yassinebelmamoun.com/pelican-tutorial.html" rel="alternate"></link><published>2024-05-18T00:00:00+07:00</published><updated>2024-05-18T00:00:00+07:00</updated><author><name>Yassine Belmamoun</name></author><id>tag:www.yassinebelmamoun.com,2024-05-18:/pelican-tutorial.html</id><summary type="html">&lt;p&gt;In my &lt;a href="https://www.yassinebelmamoun.com/start-your-blog-101.html"&gt;previous article&lt;/a&gt;, I shared my journey of realizing the importance of creating content and finding the right balance between consuming and producing. This led me to search for the perfect blogging solution that met my specific requirements, and I ultimately chose Pelican, a static site generator built with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my &lt;a href="https://www.yassinebelmamoun.com/start-your-blog-101.html"&gt;previous article&lt;/a&gt;, I shared my journey of realizing the importance of creating content and finding the right balance between consuming and producing. This led me to search for the perfect blogging solution that met my specific requirements, and I ultimately chose Pelican, a static site generator built with Python. If you want to learn more about my decision-making process, check out &lt;a href="https://www.yassinebelmamoun.com/start-your-blog-101.html"&gt;my article&lt;/a&gt; on why I chose Pelican for my blog.&lt;/p&gt;
&lt;p&gt;Now, let's dive into the process of setting up Pelican locally and deploying your blog to GitHub Pages using Github Actions. By following this tutorial, you'll have a fully customizable, self-hosted blog that's free to maintain.&lt;/p&gt;
&lt;h2&gt;Installing Pelican Locally&lt;/h2&gt;
&lt;p&gt;To get started, install Pelican on your computer by running the following command in your terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install pelican markdown
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, create a directory for your blog and navigate into it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir my-blog
cd my-blog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, generate the scaffolding for your blog using Pelican's ﻿quickstart command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican-quickstart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Answer the prompts, and you'll have the basic structure ready to go.&lt;/p&gt;
&lt;h2&gt;Writing and Previewing Blog Posts&lt;/h2&gt;
&lt;p&gt;To add new posts, create Markdown files in the &lt;code&gt;content&lt;/code&gt; directory. 
For example, create a file named &lt;code&gt;my-first-post.md&lt;/code&gt;, open it in your favorite text editor, and add metadata like title, date, category, and tags at the top:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Title: My First Blog Post
Date: 2023-05-18
Category: Blogging
Tags: pelican, python, github

Hello World! Your content starts here.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Below the metadata, write your post using Markdown syntax. Pelican's support for Markdown ensures that your content will be reader-friendly and visually appealing.&lt;/p&gt;
&lt;p&gt;To preview your blog locally, generate the HTML files and start a local server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican content
pelican --listen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Open your browser and navigate to &lt;code&gt;http://localhost:8000&lt;/code&gt; to see your blog in action. Experiment with different themes and settings in &lt;code&gt;pelicanconf.py&lt;/code&gt; to customize your blog's appearance.&lt;/p&gt;
&lt;h2&gt;Configuring GitHub Pages&lt;/h2&gt;
&lt;p&gt;First, create a new repository on GitHub named &lt;code&gt;username.github.io&lt;/code&gt;. Then, initialize a new git repository in your blog directory and add the GitHub repository as a remote:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git init
git remote add origin https://github.com/username/username.github.io.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Before automating the deployment process with GitHub Actions, you need to configure GitHub Pages for your repository. Follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to the repository's settings by clicking on the "Settings" tab.&lt;/li&gt;
&lt;li&gt;Scroll down to the "GitHub Pages" section.&lt;/li&gt;
&lt;li&gt;Under "Source," select the &lt;code&gt;gh-pages&lt;/code&gt; branch to use for GitHub Pages.&lt;/li&gt;
&lt;li&gt;Click "Save" to apply the changes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;GitHub Pages will now serve the content from the &lt;code&gt;gh-pages&lt;/code&gt; branch at &lt;code&gt;https://yourusername.github.io&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you want to use a custom domain for your blog, you can set it up in the "GitHub Pages" section as well. In my case, I use &lt;code&gt;yassinebelmamoun.com&lt;/code&gt; as my custom domain. To do this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In the "GitHub Pages" section, under "Custom domain," enter your custom domain (e.g., &lt;code&gt;yassinebelmamoun.com&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Click "Save" to apply the changes.&lt;/li&gt;
&lt;li&gt;Create a file named &lt;code&gt;CNAME&lt;/code&gt; in the root of your blog's source branch (e.g., &lt;code&gt;main&lt;/code&gt; or &lt;code&gt;master&lt;/code&gt;) and add your custom domain to it (e.g., &lt;code&gt;yassinebelmamoun.com&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Configure your domain's DNS settings to point to GitHub Pages. You'll need to add a CNAME record or an A record pointing to the GitHub Pages IP addresses. Refer to the GitHub Pages documentation for detailed instructions on configuring your domain.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once you've completed these steps, your blog will be accessible at your custom domain (e.g., &lt;code&gt;https://yassinebelmamoun.com&lt;/code&gt;).&lt;/p&gt;
&lt;h2&gt;Automating Deployment with GitHub Actions&lt;/h2&gt;
&lt;p&gt;To automate the deployment of your Pelican blog to GitHub Pages, we'll use GitHub Actions. This way, whenever you push new content or make changes to your blog, GitHub Actions will automatically rebuild and deploy your site.&lt;/p&gt;
&lt;p&gt;To do this, create a new file named &lt;code&gt;.github/workflows/publish-to-ghp.yml&lt;/code&gt; in your repository with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Publish to GitHub Pages&lt;/span&gt;
&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;main&lt;/span&gt;
&lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;SITEURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;https://www.yassinebelmamoun.com&lt;/span&gt;
&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-22.04&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;write&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;concurrency&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ github.workflow }}-${{ github.ref }}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v3&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Setup Python&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/setup-python@v3&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;python-version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;3.11&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Upgrade pip&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;# install pip=&amp;gt;20.1 to use &amp;quot;pip cache dir&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;python3 -m pip install --upgrade pip&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Get pip cache dir&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip-cache&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo &amp;quot;dir=$(pip cache dir)&amp;quot; &amp;gt;&amp;gt; $GITHUB_OUTPUT&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Cache dependencies&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/cache@v3&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.pip-cache.outputs.dir }}&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ runner.os }}-pip-${{ hashFiles(&amp;#39;**/requirements.txt&amp;#39;) }}&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;restore-keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="no"&gt;${{ runner.os }}-pip-&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install dependencies&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python3 -m pip install -r ./requirements.txt&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build site&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pelican content -o output -s pelicanconf.py&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;peaceiris/actions-gh-pages@v4&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;github.ref == &amp;#39;refs/heads/main&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;github_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;publish_dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;./output&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This workflow file instructs GitHub Actions to set up a Python environment, install your requirements, build your Pelican site, and deploy the generated output folder to a branch called &lt;code&gt;gh-pages&lt;/code&gt; using the &lt;code&gt;peaceiris/actions-gh-pages&lt;/code&gt; action.&lt;/p&gt;
&lt;p&gt;A few important remarks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For GitHub Actions beginners: The &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; is automatically created by GitHub Actions to authenticate your workflow, not a personal access token. It's a special installation access token used to authenticate on behalf of the GitHub App. You can start deploying immediately without any configuration, as the token is available in the GitHub context even if not explicitly passed.&lt;/li&gt;
&lt;li&gt;Make sure that you have &lt;code&gt;requirements.txt&lt;/code&gt; in your root folder.&lt;/li&gt;
&lt;li&gt;Make sure that you github branch is &lt;code&gt;main&lt;/code&gt; (instead of &lt;code&gt;master&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Make sure to replace https://yassinebelmamoun.github.io with your Github repository&lt;/li&gt;
&lt;li&gt;Make sure to configure your domain name in your &lt;code&gt;publishconf.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Commit your changes and push to the &lt;code&gt;main&lt;/code&gt; branch of your GitHub repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git add .
git commit -m &amp;quot;Set up Pelican blog with GitHub Actions&amp;quot;
git push -u origin main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;GitHub Actions will automatically trigger the workflow, build your Pelican site, and deploy it to GitHub Pages. After a few minutes, visit your website to see your live blog!&lt;/p&gt;
&lt;h2&gt;Embrace the Power of Pelican and GitHub Actions&lt;/h2&gt;
&lt;p&gt;With Pelican and GitHub Actions working together, you have a powerful and efficient setup for your blog. You can focus on creating amazing content while the automation takes care of the rest.&lt;/p&gt;
&lt;p&gt;Thank you for reading this tutorial on setting up Pelican and deploying your blog to GitHub Pages. I hope you found it helpful and informative.&lt;/p&gt;</content><category term="Content Creation"></category></entry><entry><title>Blogging made simple</title><link href="https://www.yassinebelmamoun.com/start-your-blog-101.html" rel="alternate"></link><published>2023-10-22T00:00:00+07:00</published><updated>2023-10-22T00:00:00+07:00</updated><author><name>Yassine Belmamoun</name></author><id>tag:www.yassinebelmamoun.com,2023-10-22:/start-your-blog-101.html</id><summary type="html">&lt;p&gt;Every week, I invest a substantial amount of time reading, exploring podcasts and watching videos, all in the pursuit of knowledge. However, I've uncovered a missing piece in this quest: passive consumption of information isn't enough, there is immense value in creating content, exposing it to a wide audience to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Every week, I invest a substantial amount of time reading, exploring podcasts and watching videos, all in the pursuit of knowledge. However, I've uncovered a missing piece in this quest: passive consumption of information isn't enough, there is immense value in creating content, exposing it to a wide audience to assist others and learn back from them.&lt;/p&gt;
&lt;p&gt;That's when I realized that I need to adjust the balance between the amount of content I passively consume and the amount of content that I actively produce. To get things rolling, I wanted to make things super easy for myself to publish articles on this blog. This post is all about sharing my current setup and explaining why and how I set it up this way.&lt;/p&gt;
&lt;h2&gt;Choice of a solution&lt;/h2&gt;
&lt;p&gt;I had the following requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I needed easy customization for my blog's format and design.&lt;/li&gt;
&lt;li&gt;The content I publish had to be reader-friendly, including support for code syntax highlighting.&lt;/li&gt;
&lt;li&gt;I wanted to steer clear of third-party dependencies like hosted platforms (Medium, Blogger, etc.).&lt;/li&gt;
&lt;li&gt;Writing offline, even on a plane, had to be seamless.&lt;/li&gt;
&lt;li&gt;Budget-wise, I aimed for an economical approach, staying within the range of $20 per year.&lt;/li&gt;
&lt;li&gt;Learning a new technology was a no-go; simplicity was paramount.&lt;/li&gt;
&lt;li&gt;Markdown had to be my go-to format for content creation.&lt;/li&gt;
&lt;li&gt;Lastly, I wanted to avoid the complexities of handling intricate systems, like databases.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I evaluated various solutions, which I categorized as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Managed Solutions (e.g. Medium, Blogger, Squarespace, etc.)&lt;/li&gt;
&lt;li&gt;Self Hosted Solutions&lt;ul&gt;
&lt;li&gt;Dynamic Website Generator (e.g. Wordpress)&lt;/li&gt;
&lt;li&gt;Static Website Generator (e.g. Jekyll, Hugo, Pelican)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Managed solutions were quickly ruled out due to limitations like domain name usage restrictions, cost, and intrusive advertisements, among other issues. My focus shifted to self-hosted alternatives.&lt;/p&gt;
&lt;p&gt;I dismissed options like WordPress for being overly complex (e.g. databases), and honed in on lightweight solutions like static website generators—specifically Jekyll, Hugo, and Pelican.&lt;/p&gt;
&lt;p&gt;Ultimately, I chose Pelican because it's built with Python, a language I'm comfortable with.&lt;/p&gt;
&lt;h2&gt;How it works&lt;/h2&gt;
&lt;p&gt;Here is a brief of how easy it is to set up:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install the Pelican library locally&lt;/li&gt;
&lt;li&gt;Run a command to quick start your project&lt;/li&gt;
&lt;li&gt;(Optional) Configure your project (e.g. themes, etc.)&lt;/li&gt;
&lt;li&gt;Write articles (and pages) in Markdown&lt;/li&gt;
&lt;li&gt;Run a command to publish your articles&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Producing content is straightforward: all you need is a text editor supporting Markdown. Then, you can track all changes with git history, publish your article with a simple &lt;code&gt;git push&lt;/code&gt; and host your entire blog on Github Pages.&lt;/p&gt;
&lt;p&gt;This setup offers a portable self-hosted blog that's fully customizable. You can write offline, and the best part? It's entirely cost-free (e.g. the only cost would be for acquiring a domain name ~ 10$ per year).&lt;/p&gt;
&lt;h2&gt;Tutorial&lt;/h2&gt;
&lt;p&gt;If you'd like to do the same, the only requirement is a very basic understanding of Python.&lt;/p&gt;
&lt;p&gt;I wrote a more detailed tutorial on &lt;a href="https://www.yassinebelmamoun.com/pelican-tutorial.html"&gt;how to get started with Pelican&lt;/a&gt;.&lt;/p&gt;</content><category term="Tutorial"></category></entry><entry><title>SaaS 101: Software as a Service Model explained</title><link href="https://www.yassinebelmamoun.com/introduction-to-saas-101.html" rel="alternate"></link><published>2022-03-26T17:02:00+07:00</published><updated>2022-03-26T17:02:00+07:00</updated><author><name>Yassine Belmamoun</name></author><id>tag:www.yassinebelmamoun.com,2022-03-26:/introduction-to-saas-101.html</id><summary type="html">&lt;p&gt;I wrote this article to introduce friends and colleagues to the subscription business model of Software as a Service (SaaS) companies.&lt;/p&gt;
&lt;p&gt;This article contains a brief introduction to SaaS businesses, an overview of the key metrics of the subscription model and an explanation of the unit economics.&lt;/p&gt;
&lt;h1&gt;What is a …&lt;/h1&gt;</summary><content type="html">&lt;p&gt;I wrote this article to introduce friends and colleagues to the subscription business model of Software as a Service (SaaS) companies.&lt;/p&gt;
&lt;p&gt;This article contains a brief introduction to SaaS businesses, an overview of the key metrics of the subscription model and an explanation of the unit economics.&lt;/p&gt;
&lt;h1&gt;What is a SaaS company?&lt;/h1&gt;
&lt;p&gt;SaaS companies sell software hosted on-cloud or on-premise to customers willing to pay for its usage on a recurrent basis (e.g. monthly, yearly).&lt;/p&gt;
&lt;p&gt;Some examples of SaaS companies are Netflix, Spotify, Hubspot, Jira, Slack, Zoom, Twilio, Manatal.&lt;/p&gt;
&lt;h2&gt;Different Types of SaaS&lt;/h2&gt;
&lt;h3&gt;B2B SaaS VS B2C SaaS&lt;/h3&gt;
&lt;p&gt;You will often hear the distinction between B2B SaaS and B2C SaaS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;B2B SaaS:&lt;/strong&gt; SaaS companies selling to businesses (e.g. Hubspot CRM, Manatal Recruitment Software, Atlassian Jira Project Management tools, Github etc.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;B2C SaaS:&lt;/strong&gt; SaaS companies selling to consumers (e.g. Spotify, Netflix, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some SaaS companies are selling to both consumers and businesses with usually different plans.&lt;/p&gt;
&lt;h3&gt;B2B Enterprise SaaS VS B2B PLG SaaS&lt;/h3&gt;
&lt;p&gt;In the B2B SaaS, you will also often hear the distinction between Enterprise SaaS and PLG SaaS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Enterprise SaaS:&lt;/strong&gt; B2B SaaS focusing on enterprise customers, typically large corporate. The cost of these solutions for the customer will be higher (e.g. a client would pay $10K-$1M or more per year). These companies will rely on a sales team to sell the software making sales cycles longer (e.g. 6 months from getting in touch with the client to implementing the solution). Enterprise SaaS also requires often a lengthy implementation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PLG SaaS&lt;/strong&gt;: B2B SaaS focusing on small and medium-sized businesses. These companies rely on their product to sell usually by offering freemium plans or free trials. These companies tend to have smaller sales teams (or no sales teams) and focus their efforts on customer support and customer success.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Several SaaS companies will sell to both large corporates and small businesses. For instance, Gitlab sells contracts worth $100K+ to enterprise customers with on-premise hosting and will also offer a free or inexpensive plans to smaller businesses starting from $19 per month.&lt;/p&gt;
&lt;p&gt;A more nuanced segmentation based on the average revenue per customer (ARPA) per year:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mice&lt;/strong&gt;: ~ $100 / year per customer&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rabbit&lt;/strong&gt;: ~ $1,000 / year per customer&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deer&lt;/strong&gt;: ~ $10,000 / year per customer&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Elephant&lt;/strong&gt;: ~ $100,000 / year per customer&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Whale&lt;/strong&gt;: ~ $1,000,000 / year per customer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The chart below (by Christoph Janz from Point Nice Capital) shows how many customers a SaaS Business to reach ~100M ARR.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ARPA segmentation of SaaS" src="images/saas-101-arpa-segmentation.png"&gt;&lt;/p&gt;
&lt;h2&gt;How do SaaS companies price their software?&lt;/h2&gt;
&lt;p&gt;Most SaaS companies will offer multiple pricing plans at different price points. Some will offer complex pricing with options to subscribe to separate products or features that a customer can pick a-la-carte (e.g. Intercom). Some others will keep it very simple with 2-3 plans.&lt;/p&gt;
&lt;p&gt;The pricing model is usually based on the following 3 categories:&lt;/p&gt;
&lt;h3&gt;Fixed pricing&lt;/h3&gt;
&lt;p&gt;The customer pays a certain amount for using the software no matter how much he uses it. A good example would be Spotify, you pay $10/month whether you listen a lot to music or not.&lt;/p&gt;
&lt;h3&gt;Quantity based pricing&lt;/h3&gt;
&lt;p&gt;The customer pays an amount proportional to a certain number (# users, # projects, # etc.). A good example would be Jira by Atlassian, you pay $10/month per user for the basic plan.&lt;/p&gt;
&lt;p&gt;The pricing is not always proportional to the quantity. Some solutions offer packaged pricing, volume pricing and graduated pricing.&lt;/p&gt;
&lt;h3&gt;Usage-based pricing&lt;/h3&gt;
&lt;p&gt;The customer pays an amount proportional to its usage of the software. A good example would be Twilio, your bill is proportional to the number of SMS you send.&lt;/p&gt;
&lt;h1&gt;What are the key metrics of a SaaS company?&lt;/h1&gt;
&lt;h2&gt;Primary Metrics&lt;/h2&gt;
&lt;h3&gt;Revenue&lt;/h3&gt;
&lt;p&gt;SaaS companies charge their customers for the usage of their software on a recurrent basis (e.g. monthly, annually). This allows SaaS companies to have more predictable revenue and less variance month over month.&lt;/p&gt;
&lt;p&gt;Imagine the following case: Netflix stops acquiring new clients and stop losing existing clients. The number of customers will be the same and their revenue every month remains constant.&lt;/p&gt;
&lt;p&gt;In comparison, another type of business will have relatively less predictable and more variable revenue.&lt;/p&gt;
&lt;p&gt;For this reason, SaaS companies and investors will tend to focus on the monthly recurrent revenue (MRR) and annual recurrent revenue (ARR) instead of the revenue.&lt;/p&gt;
&lt;p&gt;SaaS companies might charge their customers for non-recurrent services or one-offs (e.g. implementation cost) on top of the recurrent cost of the subscription. Usually, this revenue will be worth less than 10-20% of the recurrent revenue and its purpose is to cover the service cost (e.g. time spent by employees to deliver the implementation).&lt;/p&gt;
&lt;h3&gt;MRR and ARR&lt;/h3&gt;
&lt;p&gt;For SaaS businesses, MRR and ARR are key metrics that you will hear more often compared to revenue.&lt;/p&gt;
&lt;p&gt;The relation between MRR and ARR is very simple: &lt;code&gt;ARR = 12 x MRR&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If a company has 100 customers paying on average $50 per month, the MRR is equal to $5,000 and the ARR is equal to $60,000.&lt;/p&gt;
&lt;h3&gt;Customers&lt;/h3&gt;
&lt;p&gt;The total number of customers is also an important indicator. Think of the mice, rabbit, deer and elephant illustration above.&lt;/p&gt;
&lt;h2&gt;Derivatived metrics&lt;/h2&gt;
&lt;h3&gt;ARPA, ARPU, APRC and ACV&lt;/h3&gt;
&lt;p&gt;Let’s start with some definitions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ARPA stands for Average Revenue per Account.&lt;/li&gt;
&lt;li&gt;ARPU stands for Average Revenue per User.&lt;/li&gt;
&lt;li&gt;ARPC stands for Average Revenue per Customer&lt;/li&gt;
&lt;li&gt;ACV stands for Average Customer Value.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These metrics can be used interchangeably. I like to use ARPA. The ARPA is defined as the sum of all your customer’s ARR (or MRR) divided by the number of customers. This can be confusing as some will use the MRR and others the ARR.&lt;/p&gt;
&lt;p&gt;These 4 indicators indicate how large the average customer (business or consumer) pays.&lt;/p&gt;
&lt;p&gt;Let’s take a simple example: If you have 100 customers and your total ARR is $60K, ARPA is $600.&lt;/p&gt;
&lt;h3&gt;Churn (Logo, Revenue)&lt;/h3&gt;
&lt;p&gt;We usually differentiate between 2 types of churn:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Logo Churn:&lt;/strong&gt; This metric evaluates the number of customers that you’ve lost compared to your total number of customers. We usually express this metric as a rate. Let’s say you have 100 clients and lose 5 clients this month, your monthly logo churn rate is 5%.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Revenue Churn:&lt;/strong&gt; How much MRR you’ve lost compared to your total MRR. Let’s say you have an MRR of $1M and lost 20K of MRR, your monthly revenue churn is 2%.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Churn is often compared to a hole in a leaky bucket. The water inside your bucket is your MRR. When you add water to your bucket, this is considered as a newly acquired revenue from acquisition and expansion.&lt;/p&gt;
&lt;p&gt;The bigger the hole is, the harder it is to fill your bucket. Every SaaS business wants the hole in their leaky bucket to be as small as possible.&lt;/p&gt;
&lt;h3&gt;Customer Lifetime Value (LTV)&lt;/h3&gt;
&lt;p&gt;This metric represents how much a customer will spend with you during the entire time he uses your software.&lt;/p&gt;
&lt;p&gt;Let’s say your average customer pay you $10 per month on average and use your solution for an average of 38 months. Your LTV is equal to &lt;code&gt;$100 / month X 38 months = $3,800&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This formula gives a rough estimate to evaluate the LTV: &lt;code&gt;ARPA / Customer churn rate.&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;What are the Unit Economics of SaaS companies?&lt;/h1&gt;
&lt;p&gt;Investors tend to track a specific set of unit economics to evaluate a SaaS business’s performance.&lt;/p&gt;
&lt;h2&gt;Primary Units&lt;/h2&gt;
&lt;h3&gt;MRR evolution: Acquisition, Expansion, Reactivation and Contraction&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Acquisition (new MRR)&lt;/strong&gt;: When a new customer subscribes, we consider it a new subscription called acquisition. The acquisition will drive &lt;strong&gt;New MRR&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expansion MRR:&lt;/strong&gt; When an existing customer increases his MRR (e.g. upgrade plan), we speak of expansion.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Contraction MRR:&lt;/strong&gt; When an existing customer decreases his MRR (e.g. downgrade plan), we speak of contraction.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Churn MRR:&lt;/strong&gt; When an existing customer unsubscribes, we speak of churn.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reactivation MRR:&lt;/strong&gt; When a previously churned customer subscribes again, we speak of reactivation.&lt;/p&gt;
&lt;p&gt;The MRR value evolves based on these 4 movements:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;This month MRR = Last month MRR + (new MRR + expansion MRR) - (contraction MRR + churn MRR)&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Cost of Acquisition (CAC)&lt;/h3&gt;
&lt;p&gt;The cost of acquisition (CAC) is the cost of acquiring a new client. If you spend this month $10,000 to acquire 50 new clients, your CAC is $200.&lt;/p&gt;
&lt;p&gt;It is not always easy to estimate the cost of acquiring new clients and there is no standard defining what exactly should be included in the CAC.&lt;/p&gt;
&lt;p&gt;The important thing is to agree with your partners on what to include in the cost of acquiring new clients and consistently measure it the same way.&lt;/p&gt;
&lt;h2&gt;Derivatived Units&lt;/h2&gt;
&lt;h3&gt;LTV to CAC&lt;/h3&gt;
&lt;p&gt;Every SaaS business wants to maximize the customer lifetime value (LTV) and minimize the cost of acquisition (CAC). This is the reason the ratio &lt;code&gt;LTV:CAC&lt;/code&gt; is important to watch.&lt;/p&gt;
&lt;p&gt;A good ratio is 3:1, lower could mean that it cost you too much to acquire a client compared to how much the customer spends.&lt;/p&gt;
&lt;p&gt;A high ratio (e.g. 5:1) is not ideal as it indicates that you are sacrificing growth. This ratio is open to debate and I will save this part for another day.&lt;/p&gt;
&lt;h3&gt;Net MRR Churn rate&lt;/h3&gt;
&lt;p&gt;Let’s imagine your SaaS business stops acquiring new customers. What would happen to your MRR? “Eventually, it will reach $0” is a wrong answer. The right answer is: It depends.&lt;/p&gt;
&lt;p&gt;It depends on your Net MRR churn rate and more precisely on the following formula:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;This month MRR = Last month MRR + expansion MRR - (contraction MRR + churn MRR)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If your expansion MRR is higher than your contraction and churn, you will keep growing without acquiring any new clients.&lt;/p&gt;
&lt;p&gt;This is the reason investors speak about Net MRR churn rate, a normalized version of the formula above:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Net MRR churn rate = [(contraction MRR + churn MRR) - expansion MRR] / total MRR&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The best performing SaaS businesses have a negative Net MRR churn rate.&lt;/p&gt;
&lt;h1&gt;Next&lt;/h1&gt;
&lt;p&gt;All these metrics tend to be tedious to compute, maintain and visualize in an Excel document. Multiple solutions can integrate into your payment gateway (e.g. Stripe) and construct all your metrics. A few that I have tested:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chartmogul.com/"&gt;Chartmogul&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://baremetrics.com?via=yassine"&gt;BareMetrics&lt;/a&gt;*&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.profitwell.com/"&gt;ProfitWell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Business"></category></entry><entry><title>Technical Debt Explained</title><link href="https://www.yassinebelmamoun.com/technical-debt-explained.html" rel="alternate"></link><published>2021-01-04T21:50:00+07:00</published><updated>2021-01-04T21:50:00+07:00</updated><author><name>Yassine Belmamoun</name></author><id>tag:www.yassinebelmamoun.com,2021-01-04:/technical-debt-explained.html</id><summary type="html">&lt;h2&gt;What is technical debt in software development&lt;/h2&gt;
&lt;p&gt;Technical debt is the cumulative effect of all the tradeoffs made during the development of software that emphasizes short-term gains over long-term maintainability.&lt;/p&gt;
&lt;p&gt;We measure technical debt as the cost of additional work required to move from a relatively poorly designed solution to …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;What is technical debt in software development&lt;/h2&gt;
&lt;p&gt;Technical debt is the cumulative effect of all the tradeoffs made during the development of software that emphasizes short-term gains over long-term maintainability.&lt;/p&gt;
&lt;p&gt;We measure technical debt as the cost of additional work required to move from a relatively poorly designed solution to an optimal solution.&lt;/p&gt;
&lt;h2&gt;The analogy of financial debt&lt;/h2&gt;
&lt;p&gt;If technical debt is not repaid, it can accumulate 'interest', making it harder to implement changes.&lt;/p&gt;
&lt;p&gt;And unaddressed technical debt increases software entropy. Ward Cunningham summarized it in an elegant manner:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"Shipping first time code is like going into debt. A little debt speeds development so long as it is paid back promptly with a rewrite... The danger occurs when the debt is not repaid. Every minute spent on not-quite-right code counts as &lt;a href="https://en.wikipedia.org/wiki/Interest"&gt;interest&lt;/a&gt; on that debt. Entire engineering organizations can be brought to a stand-still under the debt load of an unconsolidated implementation, &lt;a href="https://en.wikipedia.org/wiki/Object-oriented_programming"&gt;object-oriented&lt;/a&gt; or otherwise."
— &lt;a href="https://en.wikipedia.org/wiki/Ward_Cunningham"&gt;Ward Cunningham&lt;/a&gt;, 1992&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Acceptance of the technical debt&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;"Technical debt is bad, but (more often than not) optimal."
&lt;a href="http://www.paulgraham.com"&gt;Paul Graham&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Technical debt is not necessarily a bad thing, and sometimes it is required to move projects forward.&lt;/p&gt;
&lt;p&gt;Especially for young start-ups,  accruing technical debt makes perfect sense. The rational behind is: pay for today’s progress with tomorrow’s efforts, until it’s clear whether the company will survive in the market. It’s simple economics. Since most startups fail, high chances are the company will simply fail and the debt will never need to be paid.&lt;/p&gt;
&lt;p&gt;This is what we would call a deliberate debt in opposition to another form: non-deliberate technical debt. Deliberate debt happens when Technology and Business teams are aligned. The goal of the organization is to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deliver progress faster&lt;/li&gt;
&lt;li&gt;Reach the product-market fit faster&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While keepin in mind that the engineering team is accumulating technical debt that must be paid eventually.&lt;/p&gt;
&lt;h2&gt;When the technical debt becomes a problem&lt;/h2&gt;
&lt;p&gt;Once a company has achieved “product-market fit” and is off to the races, it’s no longer a great idea to just stack debt on top of debt.&lt;/p&gt;
&lt;p&gt;The real problem with accumulating technical debt is that the business will never want to pay it off. Stakeholders and the rest of the company might have trouble relating to the abstract nature of resolving technical debt. Senior management might hear: “engineering is requesting permission to move at half pace for the next 3 months.” when engineering is talking about technical debt. Paying off the technical debt ends up being a very difficult thing to rally stakeholder support for.&lt;/p&gt;
&lt;p&gt;There is usually no trigger to address the technical debt issue: The impact on the velocity is slow and cumulative that we do not experience it suddenly. We learn to live with it.&lt;/p&gt;
&lt;p&gt;We tend to accept as a matter of fact the consequences of the technical debt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Disalignment between Technology and Business team: There is a feeling of constant misunderstanding between the two teams&lt;/li&gt;
&lt;li&gt;Slow down of progress: It is more and more difficult to build new features and functionalities&lt;/li&gt;
&lt;li&gt;Impact on the performance and stability: Software become a house of cards, the smallest change might have terrible consequences&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;The Death by Tech Debt&lt;/h2&gt;
&lt;p&gt;Death-by-tech-debt is a slow kind of death. Let's explore some consequences of the tech debt to understand better how it can kill a business.&lt;/p&gt;
&lt;p&gt;We can distinguish cash costs vs non-cash cost issues.&lt;/p&gt;
&lt;p&gt;Some examples of cash cost consequences of technical are:
- Need to recruit more people to maintain the system
- Extra time required to build new features
- Fines due to security breaches (e.g. SLA)
- Lost sales following the system outages (e.g. churn)&lt;/p&gt;
&lt;p&gt;The non-cash costs of the tech debt can also be pretty harmful to a business: For instance, the tech debt can make the engineer team incapable to adapt to the changes in the market.&lt;/p&gt;
&lt;h2&gt;Signs of Technical Bankruptcy&lt;/h2&gt;
&lt;p&gt;If you have any of the following signs, it is undoubtly time to take actions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The company sidelines engineering’s concerns as a nice-to-have&lt;/li&gt;
&lt;li&gt;The developers complain about the codebase becoming quite literally a “difficult work environment”&lt;/li&gt;
&lt;li&gt;New features start shipping very slowly. Or stop altogether&lt;/li&gt;
&lt;li&gt;Gradual attrition of all engineers who like building things until only “maintenance-style” engineers remain&lt;/li&gt;
&lt;li&gt;Company falls irrecoverably behind the times&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eventually the codebase goes bankrupt. And the only practical choice will be to rebuild the entire thing from the ground up&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Non-tech executives must understand that if the engineers have been release great things for the past year or so, chances are they’re selling a bit of the future to do it. This is normal. But be prepared for the bill to come due.&lt;/p&gt;
&lt;p&gt;Incremental payment of technical debt is better, much like slowly paying off a line of credit. It’s something that can be consciously incorporated into engineering operations while also investing in new work.&lt;/p&gt;
&lt;p&gt;But engineering teams need buy-in from management to do this well. When your engineering team talks about technical debt, listen. Listen like you would listen to the finance team talking about financial debt.&lt;/p&gt;
&lt;p&gt;The future of your business could very well depend on it: The cost of never paying down this technical debt is clear; eventually the cost to deliver functionality will become so high and the speed of it so slow that it is easy for a well-designed competitive software product to overtake the badly-designed software in terms of features.&lt;/p&gt;</content><category term="Software Development"></category></entry><entry><title>Hello World! This is the first article!</title><link href="https://www.yassinebelmamoun.com/hello-world-this-is-the-first-article.html" rel="alternate"></link><published>2020-05-30T09:50:00+07:00</published><updated>2020-05-30T09:50:00+07:00</updated><author><name>Yassine Belmamoun</name></author><id>tag:www.yassinebelmamoun.com,2020-05-30:/hello-world-this-is-the-first-article.html</id><content type="html">&lt;p&gt;Hello World!&lt;/p&gt;
&lt;p&gt;I finally decided to make a blog to share thoughts and notes. Anyway, here's the first post out of many to come.&lt;/p&gt;
&lt;p&gt;I will add a newsletter later.&lt;/p&gt;</content><category term="misc"></category></entry></feed>