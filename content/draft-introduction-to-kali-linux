Title: Introduction to Kali Linux
Date: 2024-05-18
Category: Security
Slug: introduction-kali

## Table of Content

1. Reconnaissance Tools:
	- Nmap for network scanning and discovery
	- OpenVAS for vulnerability scanning
	- Recon-ng for OSINT gathering
	- theHarvester for email and subdomain enumeration
2. Vulnerability Assessment Tools:
	- Nessus for comprehensive vulnerability scanning
	- Nikto for web server scanning
	- Cisco Global Exploiter for Cisco device testing
3. Web Application Testing Tools:
	- Burp Suite for manual and automated web app testing
	- OWASP ZAP for finding web app vulns
	- SQLmap for SQL injection exploitation
	- BeEF for browser exploitation
4. Password Cracking Tools:
	- John the Ripper for offline password cracking
	- Hydra for online password guessing
	- Hashcat for GPU-accelerated password recovery
5. Wireless Testing Tools:
	- Aircrack-ng suite for Wi-Fi security auditing
	- Reaver for exploiting WPS flaws
	- Kismet for wireless packet sniffing
6. Exploitation Tools:
	- Metasploit Framework for exploit development and delivery
	- Social Engineer Toolkit for social engineering attacks
	- Armitage for visual Metasploit management
7. Forensics Tools:
	- Autopsy for disk analysis and recovery
	- Volatility for memory forensics
	- Foremost for file carving


## Reconnaissance tools

Alright, let's talk reconnaissance tools. These are the utilities you use to gather intel on your target before launching an attack. Think of it like scouting enemy territory before the battle begins.

1.	Nmap (Network Mapper):
    - Nmap is the ultimate tool for network recon. It lets you scan IP ranges to discover live hosts, open ports, running services, and even OS fingerprints.
    - With Nmap, you can get a detailed map of your target network. It's like having X-ray vision for spotting potential entry points and attack surfaces.
2.	OpenVAS (Open Vulnerability Assessment System):
    - OpenVAS is a powerful scanner for identifying known vulnerabilities in systems and applications. It checks targets against a massive database of CVEs and security flaws.
    - Running an OpenVAS scan is like hiring a team of elite security auditors to comb your target for weaknesses. It's a fantastic way to get a high-level view of a system's security posture.
3.	Recon-ng:
    - Recon-ng is a hardcore OSINT (Open Source Intelligence) tool. It helps automate the process of gathering public info about targets from sources like search engines, social media, and DNS records.
    - With Recon-ng, you can build detailed dossiers on target organizations and individuals. It's scary how much info is out there if you know where to look.
4.	theHarvester:
    - theHarvester is another OSINT tool focused on enumerating subdomains, email addresses, virtual hosts, and employee names for a given target domain.
    - By scouring public data sources, theHarvester can help you map out a target's online presence and find potential usernames for guessing passwords or social engineering.

Some people might question the ethics of using these tools. But here's the reality - attackers are using them against you whether you like it or not. As a defender, you need to understand how they work.

The key is to use recon tools responsibly and legally. Focus on targets you have permission to test, like your own organization's systems or those of consenting clients.

Bottom line: Recon is the foundation of any successful pentest or security audit. With tools like Nmap, OpenVAS, Recon-ng, and theHarvester in your arsenal, you'll be well-equipped to gather the intel you need to launch targeted, effective attacks (or to defend against them). Just be sure to use your powers for good!

### Nmap: Network Mapper

What is Nmap?

- Nmap is all about exploration and discovery. It's a network scanning tool that helps you map out a target network and identify live hosts, open ports, running services, and more.
- The purpose of Nmap is to give you a detailed picture of a network's structure and potential attack surface. It's the first step in any security assessment - you need to know what you're working with.
- Nmap is incredibly versatile. You can use it for simple ping scans to identify live hosts, or you can do complex TCP/UDP port scans to fingerprint services and detect vulnerabilities.
- In a nutshell, Nmap is your trusty explorer. It scouts out the lay of the land and reports back with valuable intel.

What is it used for?

- Open Ports: Nmap can identify open ports on a target system. Open ports could indicate running services that are potentially vulnerable to attack.
- Service Versions: Nmap can fingerprint the specific versions of services running on open ports. This is crucial, as older versions often have known vulnerabilities.
- OS Fingerprinting: Nmap can often determine the operating system of a target host based on its network behavior. Knowing the OS can help identify potential vulnerabilities.
- Firewall Detection: Nmap can help identify the presence of firewalls and packet filters, which can affect how vulnerabilities are assessed and exploited.
- Scriptable Vulnerabilities: Nmap has a powerful scripting engine (NSE) that can be used to check for specific vulnerabilities, like default passwords or SSL/TLS weaknesses.

Nmap is an insanely powerful tool, but it can be a bit daunting at first. Let's break it down:

- Basic Nmap Scanning:
    - The simplest Nmap command is just `nmap [target IP or hostname]`. This will do a basic TCP connect scan on the 1000 most common ports.
    - For example, `nmap scanme.nmap.org` will scan the Nmap team's test host. It's a great way to see Nmap in action without hitting any real targets.

- Scanning Multiple Hosts:
    - You can scan a range of IPs by using CIDR notation, like `nmap 192.168.0.0/24`. This will scan all 256 IPs from 192.168.0.0 to 192.168.0.255.
    - You can also scan multiple individual IPs by separating them with spaces, like nmap `192.168.0.1 192.168.0.10 192.168.0.254`.

- Stealthy Scanning:
    - By default, Nmap does a relatively noisy TCP connect scan. For more stealthy scans, you can use a SYN scan with the -sS flag.
    - For example, `nmap -sS 192.168.0.1` will do a stealthy SYN scan on a single host. This is less likely to be detected by firewalls and IDS.

- Aggressive Scanning:
    - For a more comprehensive scan, you can use the -A flag. This enables OS detection, version scanning, script scanning, and traceroute.
    - For example, `nmap -A 192.168.0.1` will do an aggressive scan on a single host. This will give you a ton of info, but it's also very noisy and easy to detect.

- Saving Output:
    - You can save Nmap's output to a file using the -oN flag followed by a filename. This saves the output in normal format.
    - For example, `nmap -sV -oN output.txt 192.168.0.1` will do a version scan on a host and save the results to output.txt.

Some folks might be tempted to just fire off aggressive -A scans right out of the gate. But trust me, stealth is your friend. Start with basic scans and only get noisy if you need to.
The beauty of Nmap is its flexibility. You can craft scans to be as quiet or as comprehensive as you need. It's all about using the right tool for the job.

So experiment with different flags and options. Read the Nmap manual (it's actually pretty entertaining). The more you use Nmap, the more you'll appreciate just how powerful it is.


### OpenVAS (GVM): Open Vulnerability Assessment System

What is OpenVAS?

- OpenVAS, compared to Nmap, is all about depth. It's a vulnerability scanner that probes target systems for known security flaws and misconfigurations.
- The purpose of OpenVAS is to identify specific vulnerabilities in a system that could be exploited by attackers. It checks for things like missing patches, default passwords, and insecure configurations.
- OpenVAS works by comparing a target system against a massive database of known vulnerabilities (Network Vulnerability Tests or NVTs). It then generates a detailed report of found issues, complete with severity ratings and remediation advice.
- In essence, OpenVAS is your meticulous inspector. It combs through a system with a fine-toothed comb, looking for any chinks in the armor.

What is it used for?

- Known Vulnerabilities: OpenVAS checks for a vast array of known vulnerabilities using its Network Vulnerability Tests (NVTs). These include things like missing patches, insecure configurations, and default credentials.
- CVE Checks: OpenVAS cross-references found vulnerabilities with Common Vulnerabilities and Exposures (CVE) databases. This provides standardized identifiers and additional info about each vulnerability.
- Severity Ratings: OpenVAS assigns severity ratings to each found vulnerability, helping you prioritize remediation efforts. Ratings are based on factors like exploitability and potential impact.
- False Positive Management: OpenVAS includes features to manage false positives, allowing you to mark certain findings as non-issues or accepted risks.
- Compliance Checks: In addition to vulnerability checks, OpenVAS can also assess a target's compliance with various security standards and regulations, like PCI DSS or HIPAA.

OpenVAS is now part of the Greenbone Vulnerability Management (GVM) suite, here is the installation and setup process:

- Installing GVM:
    - In Kali Linux, GVM is installed by default. You can verify this by running `gvm-check-setup`.
    - If it's not installed, you can install it with `apt install gvm`.

- Setting Up GVM:
    - After installation, you need to set up GVM by running `gvm-setup`. This will prompt you to create an admin user and password.
    - The setup process will download and import the necessary vulnerability data, which can take some time.

- Starting GVM:
    - Once setup is complete, you can start the GVM services by running `gvm-start`.
    - This will start the OpenVAS scanner, the Greenbone Security Assistant (GSA) web interface, and other necessary services.

- Accessing the Web Interface:
    - After starting the services, you can access the GSA web interface at https://localhost:9392.
    - Log in with the admin username and password you created during setup.

- Creating a Scan Task:
    - In the GSA interface, go to "Scans" > "Tasks" and click the "New Task" button.
    - Give your task a name, select the scan target (you can create a new target if needed), and choose the scan configuration.
    - Click "Create" to save the task.

- Running a Scan:
    - To start the scan, click on the task in the "Scans" > "Tasks" list and click the "Start" button.
    - The scan will now run in the background. You can monitor its progress in the "Scans" > "Dashboard" section.

- Viewing Reports:
    - Once the scan is complete, you can view the report by clicking on the task in the "Scans" > "Tasks" list and selecting "Report" from the drop-down menu.
    - The report will detail all found vulnerabilities, their severity, and remediation advice.

The GVM suite can be a bit daunting at first, especially with the recent changes to the setup process. But once you get it up and running, it's an incredibly powerful tool.

Remember, OpenVAS is just one component of GVM. The suite also includes other tools for vulnerability management, like the Greenbone Security Assistant (GSA) for web-based management and the Greenbone Command Line Interface (GCI) for scripting and automation.


### Recon-ng

What is Recon-ng?

- Recon-ng is an open-source, web-based reconnaissance framework. It's designed to help you automate OSINT [reference] collection and management.
- It has a modular structure, meaning it uses separate modules for different recon tasks. This makes it highly extensible and customizable.
- Recon-ng is built in Python and has a command-line interface similar to Metasploit. If you're familiar with Metasploit, you'll feel right at home with Recon-ng.

What can Recon-ng do?

- Recon-ng can help you gather information about domains, hosts, IP addresses, contact info, social media profiles, and much more.
- It can interact with a wide variety of public data sources, including search engines, social networks, Whois records, DNS records, and PGP key servers.
- Recon-ng can also help you manage and analyze the data you collect. It has built-in features for storing data in a database, generating reports, and visualizing relationships between data points.

How does Recon-ng work?

- At its core, Recon-ng is a framework for running modular recon tasks. Each task is handled by a specific module.
- For example, there's a module for searching Google for subdomains of a target domain. There's another module for harvesting email addresses from a company's website.
- You load these modules into Recon-ng, configure them with the appropriate options (like your target domain), and then run them to collect data.
- The collected data is stored in Recon-ng's database, where it can be analyzed, exported, or fed into other modules for further recon.

Let's dive into Recon-ng and see how you can use it for OSINT gathering. Recon-ng is a powerful tool, but it has a bit of a learning curve. Let's break it down.

- Starting Recon-ng:
    - In Kali Linux, you can start Recon-ng simply by typing `recon-ng` in the terminal.
    - This will launch the Recon-ng console interface, which uses a command-line style similar to Metasploit.

- Understanding Modules:
    - Recon-ng uses modules to perform different OSINT tasks. Modules are categorized into types like discovery, exploitation, import, and reporting.
    - You can list all available modules with the `marketplace search` command. This will show you a list of modules along with their name, author, and description.

- Loading Modules:
    - To use a module, you first need to load it with the modules load command followed by the module name.
    - For example, `marketplace install recon/domains-hosts/google_site_web` will load the Google Site Web module, which finds websites hosted on a given domain.

- Setting Module Options:
    - Most modules require you to set certain options before running them. You can view a module's options with the `info` command.
    - To set an option, use the options set command followed by the option name and value. For example, `options set SOURCE example.com` will set the SOURCE option to "example.com".

- Running Modules:
    - Once you've set the necessary options, you can run a module with the run command.
    - The module will then perform its OSINT task and display the results in the console. These results are also stored in Recon-ng's database for later analysis.

- Using the Database:
    - Recon-ng stores all the data gathered by modules in a local database. You can interact with this database using SQL-like commands.
    - For example, `show hosts` will display all hosts in the database, while show contacts will display all harvested contact information like names and email addresses.

- Reporting Results:
    - Recon-ng can generate reports based on the data in its database. You can create a report with the reporting generate command followed by the report type and filename.
    - For example, reporting generate html report.html will generate an HTML report named "report.html" based on the current database contents.

Some people might be intimidated by Recon-ng's command-line interface, especially if they're used to GUI tools. But trust me, once you get the hang of the workflow, you'll appreciate the power and flexibility it provides.

The key is to start with simple modules and gradually work your way up to more complex ones. Don't be afraid to experiment and explore different module options.

Remember, OSINT is all about gathering publicly available information. Always be ethical in your use of Recon-ng and respect people's privacy.
With practice, you'll be able to chain together different modules to build comprehensive OSINT dossiers on your targets. The amount of information you can gather with Recon-ng is truly eye-opening (and a bit scary).


Reference:

### theHarvester

Let's dive into theHarvester! This is another powerful OSINT (Open Source Intelligence) tool that can help you gather information about a target domain or company. Here's what you need to know:

What is theHarvester?

- theHarvester is a Python tool designed to help penetration testers and security researchers gather open source intelligence about a target.
- It's primarily used for collecting email accounts, subdomain names, virtual hosts, open ports/banners, and employee names from various public sources.
- theHarvester is free, open-source, and comes pre-installed on many security-focused Linux distributions like Kali Linux.

What is theHarvester used for?

- Reconnaissance: theHarvester is often used in the early stages of a penetration test or security assessment to gather information about the target.
- Email Harvesting: One of the primary uses of theHarvester is to gather email addresses associated with a target domain. These can be used for social engineering or to identify potential points of contact.
- Subdomain Enumeration: theHarvester can also discover subdomains of a target domain, which can expand the potential attack surface.
- Identifying Employee Names: By gathering employee names, theHarvester can help build a profile of an organization's structure and key personnel.

How does theHarvester work?

- theHarvester uses a variety of public data sources to gather information. These include search engines (like Google, Bing, and Yahoo), PGP key servers, and specific sites like LinkedIn, Twitter, and more.
- For email harvesting, it searches these sources for email addresses with the target domain.
- For subdomain enumeration, it uses techniques like Google dorking (advanced search queries) to discover subdomains that are publicly mentioned online.
- theHarvester can also interact with DNS servers to gather additional information about discovered subdomains and hosts.

Here's an example of how you might use theHarvester to gather information about the domain "example.com":

```
theHarvester -d example.com -b otx -l 500
```

This command tells theHarvester to:
- `-d example.com`: Use "example.com" as the target domain
- `-b otx`: Use otx as the data source
- `-l 500`: Limit the search to 500 results

theHarvester will then search Google for email addresses, subdomains, and other information related to "example.com" and present the results in a report.

### OSINT: Open Source Intelligence

OSINT, or Open Source Intelligence, is the practice of gathering information from publicly available sources. It's a fancy term for doing deep research using data that's freely accessible online. 

Here's what you need to know:

What counts as OSINT?

- OSINT encompasses any information that can be legally obtained from public sources. This includes websites, social media, news articles, public records, and more.
- The key is that the information must be openly available. Accessing private data or using hacking techniques is not OSINT.

Why is OSINT important?

- OSINT is a goldmine for investigators, journalists, and security professionals. It allows them to build detailed profiles of individuals and organizations using entirely legal means.
- In the security world, OSINT is often used for reconnaissance before penetration testing or social engineering attacks. By gathering public info, attackers can craft more targeted and effective strategies.

What are some common OSINT techniques?

- Google dorking: Using advanced search operators to find specific information on the web, like sensitive files or exposed devices.
- Social media mining: Analyzing a target's social media activity to uncover personal details, relationships, and patterns of behavior.
- Whois lookups: Querying domain registration records to find information about website owners, like names, addresses, and phone numbers.
- Image metadata analysis: Examining the EXIF data of images to extract location info, camera details, and other hidden metadata.

Some folks might think OSINT is just glorified Googling. But trust me, it goes way beyond a simple search. Skilled OSINT practitioners can uncover an astonishing amount of information by piecing together data from multiple sources.

The beauty of OSINT is that it's all about working smarter, not harder. By leveraging freely available info, you can gain powerful insights without resorting to illegal or unethical means.



## Nikto

What is Nikto?

- Nikto is an open-source web server scanner. It's designed to scan web servers for potential vulnerabilities and misconfigurations.
- It's commonly used by web developers, system administrators, and penetration testers to audit the security of web servers.
- Nikto works by sending a series of HTTP requests to a target web server and analyzing the responses. It checks for issues like outdated server software, dangerous file paths, and insecure configuration options.
- One of Nikto's strengths is its ability to identify specific versions of web server software and plugins, which can help in identifying known vulnerabilities.
- Nikto is a command-line tool and is included by default in many security-focused Linux distributions like Kali Linux.

Let's dive into how to use Nikto for web server scanning. Nikto is a command-line tool, so you'll need to be comfortable working in the terminal. Here's a step-by-step guide:

1.	Basic Scanning:

- To perform a basic scan of a web server, use the following command: `nikto -h <target>`
- Replace <target> with the IP address or domain name of the web server you want to scan.
- For example, to scan the web server at example.com, you would run: `nikto -h example.com`

2.	Scanning with SSL:

- If the web server uses SSL/TLS (i.e., it's accessed via https://), you need to specify the SSL port with the -p flag: `nikto -h <target> -p 443`
- This tells Nikto to scan the web server on port 443, which is the default port for HTTPS.

3.	Scanning with Authentication:

- If the web server requires authentication, you can specify the username and password with the `-id` flag: `nikto -h <target> -id <username>:<password>`
- Replace <username> and <password> with the appropriate credentials.

4.	Saving the Output:

- To save the output of the scan to a file, use the `-o` flag followed by the filename: `nikto -h <target> -o report.txt`
- This will save the output to a file named `report.txt` in the current directory.

5.	Tuning the Scan:

- `-Tuning x`: Tunes the scan for a specific level of invasiveness. Replace x with a number from 1 (least invasive) to 9 (most invasive).
- `-evasion x`: Evades IDS/IPS by fragmenting IP packets. Replace x with a technique from the available list (run nikto -list evasion to see the list).
- `-Plugins x`: Specifies which plugins to use for the scan. Replace x with a plugin name or 'all' for all plugins.

Here's an example of a more complex Nikto command that incorporates some of these options:

```
nikto -h example.com -p 443 -id admin:password -Tuning 4 -evasion 1 -Plugins apache_expect_xss -o report.txt
```

This command scans example.com on port 443 (HTTPS), uses the 'admin' username and 'password' password for authentication, tunes the scan to level 4, uses evasion technique 1, only uses the apache_expect_xss plugin, and saves the output to report.txt.


## 3. Web Application Testing Tools:

### Burp Suite

What is Burp Suite?

- Burp Suite is an integrated platform for performing security testing of web applications. It's developed by PortSwigger Web Security.
- It's a Java-based tool that operates as a proxy server between your browser and the target web application. This allows it to intercept, inspect, and modify the traffic between the two.
- Burp Suite is highly extensible and has a wide range of tools for various aspects of web app security testing.
- While it has a free "Community Edition", the real power comes in the paid "Professional" and "Enterprise" editions.

What is Burp Suite used for?

- Mapping an Application: Burp's "Target" tool allows you to map out the structure of a web application, showing all the URLs, parameters, and cookies.
- Analyzing Requests and Responses: The "Proxy" tool lets you intercept and modify the requests and responses between your browser and the web app. This is useful for analyzing the app's communication and injecting payloads for testing.
- Automated Scanning: Burp's "Scanner" tool can automatically crawl a web app and test for various security issues like SQL injection, cross-site scripting (XSS), and more.
- Manual Exploitation: The "Repeater" tool allows you to capture, modify, and replay individual requests. This is invaluable for manual testing and exploitation of vulnerabilities.
- Automating Attacks: The "Intruder" tool is used for automating customized attacks. You can use it to brute-force login forms, fuzz parameters, and more.
- Manipulating Sessions: The "Sequencer" tool analyzes the randomness of session tokens. Weak session tokens can lead to session hijacking attacks.
- Extending Functionality: Burp Suite has an "Extender" tool that allows you to add custom functionality via plugins. There's a large community of developers creating plugins for various tasks.

Here's a basic workflow of how Burp Suite might be used:

1. Configure your browser to use Burp as a proxy.
2. Browse the target web application. Burp will intercept the traffic and map out the application structure.
3. Use the "Scanner" to automatically test for common vulnerabilities.
4. For any potential vulnerabilities found, use the "Repeater" to manually verify and attempt to exploit them.
5. If you need to automate any specific attacks (like brute-forcing a login), use the "Intruder".
6. Throughout the process, use the "Proxy" to analyze the requests and responses for any interesting behavior or potential vulnerabilities.

Burp Suite is an incredibly powerful tool, but it does have a steep learning curve. It's not a "point-and-click" tool - it requires a solid understanding of web application security concepts to use effectively.

Additionally, while Burp can automate certain tasks, it's not a replacement for human expertise. Automated scans can have false positives and false negatives. Manual verification is always necessary.

### OWASP ZAP

What is OWASP ZAP?

- OWASP ZAP (Zed Attack Proxy) is an open-source web application security scanner. It's maintained by the Open Web Application Security Project (OWASP), a nonprofit organization dedicated to improving software security.
- Like Burp Suite, ZAP acts as a man-in-the-middle proxy, allowing it to intercept and inspect traffic between the browser and web application.
- ZAP is designed to be used by both those new to application security as well as professional penetration testers.
- One of ZAP's key strengths is its ease of use. It has a more intuitive interface compared to Burp Suite, making it a good choice for those new to web app testing.

What is OWASP ZAP used for?

- Intercepting Proxy: Like Burp, ZAP's core functionality is its ability to act as a proxy. It allows you to see all the requests and responses between your browser and the web app, and modify these on the fly.
- Active Scanning: ZAP's "Active Scan" feature automatically tests for a wide range of potential vulnerabilities, including SQL Injection, XSS, and many others.
- Passive Scanning: ZAP also has a "Passive Scan" feature that continually analyzes all the requests and responses sent through the proxy, looking for potential issues without actually sending any new requests.
- Spidering: ZAP's "Spider" tool crawls through a web application, following all the links and building a site map. This helps in understanding the structure of the application and discovering hidden pages or functionality.
- Forced Browsing: The "Forced Browse" feature allows you to attempt to directly access files and directories on the web server, which can uncover hidden or sensitive resources.
- Fuzzing: ZAP's "Fuzzer" is used for inputting unexpected or malformed data into the application to see how it responds. This can uncover input validation flaws and potential injection vulnerabilities.
- Scripting: ZAP allows for scripting in various languages (including JavaScript and Python) to automate tasks and extend functionality.

Here's a basic workflow of how OWASP ZAP might be used:

1. Configure your browser to use ZAP as a proxy.
2. Browse the target web application. ZAP will build a site map and passively scan the traffic.
3. Use the "Active Scan" to automatically test for common vulnerabilities.
4. Review the alerts generated by the passive and active scans. Verify these manually as needed using the proxy and other tools.
5. Use tools like the "Fuzzer" and "Forced Browse" to further test for specific types of vulnerabilities.
6. If needed, use the scripting capabilities to automate custom tests or tasks.

While ZAP and Burp Suite have many similarities, ZAP has some advantages, particularly for those new to web app testing. Its user interface is more intuitive, and it has excellent documentation and community support.

However, Burp Suite is generally considered more powerful and flexible, particularly for advanced users. It has a more extensive set of tools and is more easily extensible.

Kali Linux comes with OWASP ZAP pre-installed.

Starting OWASP ZAP:

1. Open the Applications menu, navigate to "Web Application Analysis" (or type "ZAP" into the search bar), and click on "OWASP ZAP".
2. When ZAP starts, you'll see the "Start" window. For now, select "No, I do not want to persist this session at this moment in time" and click "Start".

Configuring your browser to use ZAP as a proxy:

1. In ZAP, go to "Tools" > "Options" > "Local Proxies". Note the address and port ZAP is using (by default, it's `localhost` and port `8080`).
2. Kali Linux comes with Firefox ESR (Extended Support Release) pre-installed. Open Firefox.
3. In Firefox, go to "Edit" > "Preferences" > "General" > "Network Settings" > "Settings" and select "Manual proxy configuration".
4. Enter ZAP's address and port (`localhost` and `8080` by default) in the "HTTP Proxy" field, then click "OK".

Exploring and Scanning a Web Application:

1. In ZAP, in the "Quick Start" tab, enter the URL of the web application you want to test in the "URL to attack" field, then click "Attack".
2. ZAP will start crawling the application and building a site map. You can view this in the "Sites" tab on the left.
3. As ZAP crawls, it also passively scans all the requests and responses. You can view any alerts it generates in the "Alerts" tab at the bottom.
4. After the crawl is complete, you can perform an active scan. Go to the "Sites" tab, right-click on the site you want to scan, and select "Attack" > "Active Scan".
5. ZAP will now actively test the application for various vulnerabilities. Any new alerts will appear in the "Alerts" tab.

Manually Testing and Verifying:

1. In the "Sites" tab, you can navigate through the site map to individual pages and requests.
2. Select a request to view its details in the "Request" and "Response" tabs on the right.
3. To manually test a request, right-click it and select "Open/Resend with Request Editor". This allows you to modify the request before sending it.
4. In the "Alerts" tab, click on an alert to see more details. Right-click and select "Open/Resend with Request Editor" to attempt to manually reproduce and verify the issue.

Using Other Tools:

1. ZAP has many other tools available in the "Tools" menu, such as the "Fuzzer", "Encode/Decode/Hash", and "Port Scan".
2. Experiment with these tools as needed for your specific testing requirements.


### SQLmap for SQL injection exploitation

What is SQLmap?

- SQLmap is an open-source penetration testing tool that automates the process of detecting and exploiting SQL injection flaws.
- It comes with a powerful detection engine, many niche features for the ultimate penetration tester, and a broad range of switches lasting from database fingerprinting, over data fetching from the database, to accessing the underlying file system and executing commands on the operating system via out-of-band connections.
- SQLmap is a command-line tool written in Python.

What is the purpose of SQLmap?

- The main goal of SQLmap is to make SQL injection testing more efficient and less tedious for penetration testers and security auditors.
- It can be used to automatically detect SQL injection vulnerabilities in web applications.
- Once a vulnerability is found, SQLmap can be used to exploit it and perform various operations on the database, such as:
    - Retrieving data from the database
    - Executing commands on the database server
    - Dropping or creating database tables
    - And more, depending on the specific database and the privileges of the user that the application is using to connect to it.

How to use SQLmap in Kali Linux:

1. Open the Terminal in Kali Linux.
2. SQLmap should come pre-installed in Kali Linux. You can check if it's installed and see its version with the command: `sqlmap --version`
3. To use SQLmap, you typically start by identifying a URL or a parameter that you want to test for SQL injection. For example, let's say you want to test the 'id' parameter in the URL `http://example.com/product.php?id=123`.
4. To test this URL with SQLmap, you would use the following command: `sqlmap -u "http://example.com/product.php?id=123"` This will make SQLmap test the 'id' parameter for SQL injection vulnerabilities.
5. If a vulnerability is found, SQLmap will ask if you want to exploit it. You can choose to retrieve data from the database, execute commands, and more.
6. SQLmap has a lot of options and switches that you can use to customize its behavior. You can see all of them by using the command: `sqlmap -h`

Here's an example of a more complex SQLmap command:
```
sqlmap -u "http://example.com/product.php?id=123" --dbms=mysql --tables --columns --dump
```

This command tells SQLmap to:
- Test the URL 'http://example.com/product.php?id=123'
- Use techniques specific to MySQL databases (--dbms=mysql)
- Retrieve the list of tables (--tables) and columns (--columns) from the database
- Dump the data from the tables (--dump)

SQLmap is a powerful tool, but it should be used responsibly and only on systems that you have permission to test.

Also, while SQLmap automates much of the SQL injection process, it's not a substitute for understanding how SQL injection works. It's a good idea to learn about SQL injection vulnerabilities and how to manually test for and exploit them, in addition to using automated tools like SQLmap.